/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_MSPY_WRAP_H_
#define SWIG_MSPY_WRAP_H_

#include <map>
#include <string>


class SwigDirector_StateChange : public wallaroo::StateChange, public Swig::Director {

public:
    SwigDirector_StateChange(PyObject *self);
    SwigDirector_StateChange(PyObject *self, uint64_t id_);
    virtual ~SwigDirector_StateChange();
    virtual uint64_t hash() const;
    virtual uint64_t partition_index() const;
    virtual string getHashAsString() const;
    virtual void deserialize(char *bytes);
    virtual void serialize(char *bytes, size_t nsz_);
    virtual size_t serialize_get_size();
    virtual char const *name();
    virtual void apply(wallaroo::State *state_);
    virtual void to_log_entry(char *bytes_);
    virtual size_t get_log_entry_size();
    virtual size_t get_log_entry_size_header_size();
    virtual size_t read_log_entry_size_header(char *bytes_);
    virtual bool read_log_entry(char *bytes_);
    virtual void id(uint64_t id_);
    virtual uint64_t id();
    virtual string getHashAsString();

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class StateChange doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[16];
#endif

};


class SwigDirector_StateComputation : public wallaroo::StateComputation, public Swig::Director {

public:
    SwigDirector_StateComputation(PyObject *self);
    virtual ~SwigDirector_StateComputation();
    virtual uint64_t hash() const;
    virtual uint64_t partition_index() const;
    virtual string getHashAsString() const;
    virtual void deserialize(char *bytes);
    virtual void serialize(char *bytes, size_t nsz_);
    virtual size_t serialize_get_size();
    virtual char const *name();
    virtual void *compute(wallaroo::Data *input_, wallaroo::StateChangeRepository *state_change_repository_, void *state_change_Respository_helper_, wallaroo::State *state_, void *none);
    virtual size_t get_number_of_state_change_builders();
    virtual wallaroo::StateChangeBuilder *get_state_change_builder(size_t idx_);

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class StateComputation doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[10];
#endif

};


#endif
